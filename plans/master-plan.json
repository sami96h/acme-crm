{
  "raw": "# Comprehensive Unified Development Plan: Acme CRM\n\n# 1. EXECUTIVE SUMMARY\n\nAcme CRM is a mid-sized customer relationship management platform designed to streamline contact management, deal tracking, and pipeline reporting for growing businesses. The system leverages a modern technology stack including Next.js 14.0+ with TypeScript for the frontend, Node.js 20+ with Express for the backend API, PostgreSQL 15+ as the database with Prisma ORM, containerized with Docker, and deployed on AWS infrastructure. This solution provides businesses with a comprehensive, scalable CRM platform that enhances customer relationship management, improves sales pipeline visibility, and delivers actionable business insights through advanced reporting capabilities.\n\n**Primary Stakeholders:** Sales teams, marketing professionals, business executives, IT administrators\n**End Users:** Sales representatives, account managers, marketing coordinators, sales managers\n\n# 2. MVP CORE GOALS\n\n## Primary Objectives\n\n• **Contact Management Excellence:** Implement comprehensive contact management supporting 10,000+ contacts with real-time search, advanced filtering, and relationship mapping capabilities\n• **Pipeline Visualization:** Develop interactive deal pipeline with drag-and-drop functionality supporting 5+ customizable stages and automated stage progression\n• **Deal Tracking Precision:** Enable complete deal lifecycle management with value tracking, probability scoring, and automated follow-up reminders\n• **Reporting Dashboard:** Create real-time analytics dashboard with 10+ pre-built reports including conversion rates, pipeline health, and performance metrics\n• **Multi-user Collaboration:** Support 50+ concurrent users with role-based access control and real-time collaboration features\n• **Data Import/Export:** Provide robust CSV/Excel import/export functionality supporting 10,000+ record batches\n• **Performance Optimization:** Achieve sub-2-second page load times and handle 1,000+ concurrent API requests\n\n## Non-goals (MVP Scope Exclusions)\n\n• Advanced AI/ML predictive analytics\n• Mobile native applications (web-responsive only)\n• Third-party integrations (Salesforce, HubSpot, etc.)\n• Advanced marketing automation workflows\n• Voice/video calling integration\n• Advanced document management\n• Multi-language support\n• Custom field types beyond basic text/number/date/select\n\n# 3. COMPREHENSIVE SYSTEM ARCHITECTURE\n\n## High-Level Architecture Diagram\n\n```\n┌─────────────────────────────────────────────────────────────────────────────┐\n│                           AWS CLOUD INFRASTRUCTURE                         │\n├─────────────────────────────────────────────────────────────────────────────┤\n│  ┌──────────────┐  ┌──────────────┐  ┌──────────────┐  ┌──────────────┐   │\n│  │   Route 53   │  │ CloudFront   │  │     WAF      │  │  Certificate │   │\n│  │    (DNS)     │  │    (CDN)     │  │ (Security)   │  │   Manager    │   │\n│  └──────────────┘  └──────────────┘  └──────────────┘  └──────────────┘   │\n├─────────────────────────────────────────────────────────────────────────────┤\n│                           APPLICATION LAYER                                │\n├─────────────────────────────────────────────────────────────────────────────┤\n│  ┌──────────────────────────────────┐  ┌──────────────────────────────────┐ │\n│  │        ALB (Load Balancer)       │  │         API Gateway              │ │\n│  └──────────────────────────────────┘  └──────────────────────────────────┘ │\n├─────────────────────────────────────────────────────────────────────────────┤\n│                          COMPUTE LAYER                                     │\n├─────────────────────────────────────────────────────────────────────────────┤\n│  ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐              │\n│  │   ECS Fargate   │ │   ECS Fargate   │ │   ECS Fargate   │              │\n│  │ (Next.js Frontend) │ (Express API)  │ (Background Jobs) │              │\n│  │  - Next.js 14   │ │ - Node.js 20   │ │ - Node.js 20    │              │\n│  │  - TypeScript   │ │ - Express 4.18 │ │ - Bull Queue    │              │\n│  │  - Tailwind CSS │ │ - Prisma ORM   │ │ - Redis         │              │\n│  └─────────────────┘ └─────────────────┘ └─────────────────┘              │\n├─────────────────────────────────────────────────────────────────────────────┤\n│                           DATA LAYER                                       │\n├─────────────────────────────────────────────────────────────────────────────┤\n│  ┌──────────────────────────────────┐  ┌──────────────────────────────────┐ │\n│  │         RDS PostgreSQL           │  │        ElastiCache Redis         │ │\n│  │      - Primary Instance          │  │     - Session Storage            │ │\n│  │      - Read Replicas (2)         │  │     - Cache Layer                │ │\n│  │      - Automated Backups         │  │     - Rate Limiting              │ │\n│  └──────────────────────────────────┘  └──────────────────────────────────┘ │\n├─────────────────────────────────────────────────────────────────────────────┤\n│                          STORAGE LAYER                                     │\n├─────────────────────────────────────────────────────────────────────────────┤\n│  ┌──────────────────────────────────┐  ┌──────────────────────────────────┐ │\n│  │           S3 Buckets             │  │        CloudWatch Logs          │ │\n│  │    - File Uploads                │  │     - Application Logs           │ │\n│  │    - Static Assets               │  │     - Metrics & Monitoring       │ │\n│  │    - Database Backups            │  │     - Error Tracking             │ │\n│  └──────────────────────────────────┘  └──────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────────────────────────┘\n```\n\n## Component Details\n\n### Frontend Layer (Next.js 14.0.3)\n- **Technologies:** Next.js 14.0.3, TypeScript 5.2+, Tailwind CSS 3.3+, React 18.2+\n- **Core Responsibilities:** \n  - Server-side rendering for optimal SEO and performance\n  - Client-side routing and state management with Zustand\n  - Real-time UI updates via WebSocket connections\n  - Progressive Web App capabilities\n- **Integration Points:** Express API via Axios HTTP client, WebSocket connection for real-time features\n\n### API Layer (Express 4.18.2 + Node.js 20.9.0)\n- **Technologies:** Node.js 20.9.0 LTS, Express 4.18.2, TypeScript 5.2+, Prisma 5.6+\n- **Core Responsibilities:**\n  - RESTful API endpoints with OpenAPI 3.0 documentation\n  - JWT-based authentication and authorization\n  - Rate limiting and request validation with Joi\n  - Background job processing with Bull Queue\n- **Integration Points:** PostgreSQL via Prisma ORM, Redis for caching and sessions\n\n### Database Layer (PostgreSQL 15.4)\n- **Technologies:** AWS RDS PostgreSQL 15.4, Prisma ORM 5.6+\n- **Core Responsibilities:**\n  - ACID-compliant transactional data storage\n  - Advanced indexing strategies for query optimization\n  - Connection pooling with PgBouncer\n  - Automated backups and point-in-time recovery\n\n### Infrastructure Layer (AWS + Docker)\n- **Technologies:** Docker 24.0+, AWS ECS Fargate, AWS ALB, AWS RDS\n- **Core Responsibilities:**\n  - Container orchestration and auto-scaling\n  - Load balancing and health monitoring\n  - Secure network configuration with VPC\n  - Monitoring and logging with CloudWatch\n\n# 4. ROLES & PERMISSIONS MATRIX\n\n| Feature/Action | Super Admin | Admin | Sales Manager | Sales Rep | Marketing User | Viewer |\n|----------------|-------------|--------|---------------|-----------|----------------|---------|\n| **User Management** |\n| Create/Delete Users | ✅ | ✅ | ❌ | ❌ | ❌ | ❌ |\n| Edit User Roles | ✅ | ✅ | ❌ | ❌ | ❌ | ❌ |\n| View All Users | ✅ | ✅ | ✅ | ❌ | ❌ | ❌ |\n| **Contact Management** |\n| Create Contacts | ✅ | ✅ | ✅ | ✅ | ✅ | ❌ |\n| Edit Own Contacts | ✅ | ✅ | ✅ | ✅ | ✅ | ❌ |\n| Edit All Contacts | ✅ | ✅ | ✅ | ❌ | ❌ | ❌ |\n| Delete Contacts | ✅ | ✅ | ✅ | ❌ | ❌ | ❌ |\n| View All Contacts | ✅ | ✅ | ✅ | ❌ | ✅ | ✅ |\n| Import/Export Contacts | ✅ | ✅ | ✅ | ❌ | ✅ | ❌ |\n| **Deal Management** |\n| Create Deals | ✅ | ✅ | ✅ | ✅ | ❌ | ❌ |\n| Edit Own Deals | ✅ | ✅ | ✅ | ✅ | ❌ | ❌ |\n| Edit Team Deals | ✅ | ✅ | ✅ | ❌ | ❌ | ❌ |\n| Delete Deals | ✅ | ✅ | ✅ | ❌ | ❌ | ❌ |\n| View Pipeline | ✅ | ✅ | ✅ | ✅ | ❌ | ✅ |\n| **Reporting** |\n| View Own Reports | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ |\n| View Team Reports | ✅ | ✅ | ✅ | ❌ | ✅ | ✅ |\n| View Company Reports | ✅ | ✅ | ✅ | ❌ | ❌ | ❌ |\n| Create Custom Reports | ✅ | ✅ | ❌ | ❌ | ❌ | ❌ |\n| **System Configuration** |\n| Manage Pipeline Stages | ✅ | ✅ | ❌ | ❌ | ❌ | ❌ |\n| Configure Integrations | ✅ | ✅ | ❌ | ❌ | ❌ | ❌ |\n| System Settings | ✅ | ❌ | ❌ | ❌ | ❌ | ❌ |\n\n## RBAC Enforcement Rules\n\n```typescript\n// middleware/rbac.ts\nexport interface Permission {\n  resource: string;\n  action: string;\n  condition?: (user: User, resource: any) => boolean;\n}\n\nexport const rolePermissions: Record<UserRole, Permission[]> = {\n  SUPER_ADMIN: [{ resource: '*', action: '*' }],\n  ADMIN: [\n    { resource: 'users', action: 'create|read|update|delete' },\n    { resource: 'contacts', action: '*' },\n    { resource: 'deals', action: '*' },\n    { resource: 'reports', action: '*' }\n  ],\n  SALES_MANAGER: [\n    { resource: 'contacts', action: '*' },\n    { resource: 'deals', action: '*' },\n    { \n      resource: 'users', \n      action: 'read',\n      condition: (user, targetUser) => user.teamId === targetUser.teamId \n    }\n  ],\n  SALES_REP: [\n    { \n      resource: 'contacts', \n      action: 'create|read|update',\n      condition: (user, contact) => contact.ownerId === user.id \n    },\n    { \n      resource: 'deals', \n      action: 'create|read|update',\n      condition: (user, deal) => deal.ownerId === user.id \n    }\n  ]\n};\n```\n\n# 5. COMPREHENSIVE DATA MODEL\n\n## Core Entity Schemas (Prisma)\n\n```typescript\n// prisma/schema.prisma\ngenerator client {\n  provider = \"prisma-client-js\"\n  previewFeatures = [\"fullTextSearch\", \"postgresqlExtensions\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  extensions = [pg_trgm]\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  email         String    @unique\n  firstName     String\n  lastName      String\n  role          UserRole  @default(SALES_REP)\n  teamId        String?\n  isActive      Boolean   @default(true)\n  lastLoginAt   DateTime?\n  passwordHash  String\n  avatarUrl     String?\n  timezone      String    @default(\"UTC\")\n  \n  // Relationships\n  team          Team?     @relation(fields: [teamId], references: [id])\n  ownedContacts Contact[] @relation(\"ContactOwner\")\n  ownedDeals    Deal[]    @relation(\"DealOwner\")\n  activities    Activity[]\n  sessions      Session[]\n  \n  // Timestamps\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt\n  \n  @@map(\"users\")\n  @@index([email])\n  @@index([teamId])\n  @@index([role])\n}\n\nmodel Team {\n  id          String @id @default(cuid())\n  name        String\n  description String?\n  managerId   String\n  isActive    Boolean @default(true)\n  \n  // Relationships\n  members     User[]\n  \n  // Timestamps\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n  \n  @@map(\"teams\")\n}\n\nmodel Contact {\n  id              String            @id @default(cuid())\n  firstName       String\n  lastName        String\n  email           String?\n  phone           String?\n  company         String?\n  jobTitle        String?\n  website         String?\n  linkedinUrl     String?\n  address         Json?             // { street, city, state, country, zipCode }\n  tags            String[]          @default([])\n  customFields    Json?             // Flexible custom data\n  notes           String?\n  leadScore       Int?              @default(0)\n  leadSource      LeadSource?\n  status          ContactStatus     @default(ACTIVE)\n  ownerId         String\n  \n  // Relationships\n  owner           User              @relation(\"ContactOwner\", fields: [ownerId], references: [id])\n  deals           Deal[]\n  activities      Activity[]\n  \n  // Timestamps\n  createdAt       DateTime          @default(now())\n  updatedAt       DateTime          @updatedAt\n  lastContactedAt DateTime?\n  \n  @@map(\"contacts\")\n  @@index([email])\n  @@index([company])",
  "note": "Plan not strict JSON; passing raw text.",
  "summary": "Project plan generated by Claude"
}